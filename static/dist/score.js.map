{"version":3,"sources":["../client/score.js"],"names":[],"mappings":"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","file":"score.js","sourcesContent":["class CompleteTitle extends React.Component {\n    shouldComponentUpdate(nextProps, nextState) {\n        return false;\n    }\n    render() {\n        const {title} = this.props;\n        var charsNodes = title.Characters.map((charStat, i) => {\n            var score = \"\";\n            if (charStat.Score != 0) {\n                if (charStat.Score > 0 ) {\n                    score += \"+\";\n                }\n                score += charStat.Score;\n            }\n            return <p key={'' + charStat.Id + i} className=\"stat-char\">\n                <span className=\"stat-char-score\">{score}</span>\n                <img src={charStat.Img} className=\"stat-char-img\" />\n                <a target=\"_blank\" className=\"stat-char-name\" href={\"http://myanimelist.net/character/\" + charStat.Id}>{charStat.Name}</a>\n            </p>\n        });\n        const lowerTitle = title.Title.toLowerCase();\n        const lowerEnglish = title.English.toLowerCase();\n        var isEnglishNeeded = title.English && lowerTitle.search(lowerEnglish) == -1 && lowerTitle != lowerEnglish;\n        return <div className=\"title-scores\">\n            <p className=\"score-title-turn\">turn: {title.Turn}</p>\n            <a target=\"_blank\" className=\"score-title-name\" href={\"http://myanimelist.net/anime/\" + title.Id}>\n                {title.Title} {isEnglishNeeded ? \"(\" + title.English + \")\":\"\"}</a>\n            {charsNodes}\n        </div>\n    }\n}\n\nclass StatsImagesGroup extends React.Component {\n    render() {\n        const {imagesArray, score} = this.props;\n        var imagesGroup = [];\n        for(var i = 0; i < imagesArray.length; i += 5) {\n            imagesGroup.push(<p key={'' + i} className=\"stat-char\">\n                <span className=\"stat-char-score\">{ score ? score*(imagesArray.slice(i,i+5).length): \"\" }</span>\n                <img src={imagesArray[i]} className=\"stat-char-img stat-change-img\" />\n                {imagesArray[i+1]?<img src={imagesArray[i+1]} className=\"stat-char-img stat-change-img\" />:\"\"}\n                {imagesArray[i+2]?<img src={imagesArray[i+2]} className=\"stat-char-img stat-change-img\" />:\"\"}\n                {imagesArray[i+3]?<img src={imagesArray[i+3]} className=\"stat-char-img stat-change-img\" />:\"\"}\n                {imagesArray[i+4]?<img src={imagesArray[i+4]} className=\"stat-char-img stat-change-img\" />:\"\"}\n            </p>)\n        }\n        return <div>\n            {imagesGroup}\n        </div>\n    }\n}\n\nclass ChangeImage extends React.Component {\n    shouldComponentUpdate(nextProps, nextState) {\n        return this.props.changeGroup.length != nextProps.changeGroup.length\n    }\n    render() {\n        const {changeGroup} = this.props;\n        return <div className=\"title-scores\">\n            <p className=\"score-title-turn\">image: {changeGroup[0].Turn}</p>\n            <StatsImagesGroup imagesArray={changeGroup.map(change => change.OldImg)} score={changeGroup[0].Score} />\n        </div>\n    }\n}\n\nclass Advice extends React.Component {\n    shouldComponentUpdate(nextProps, nextState) {\n        return this.props.adviceGroup.length != nextProps.adviceGroup.length\n    }\n    render() {\n        const {adviceGroup} = this.props;\n        var adviceNodes = [];\n        for (var advice of adviceGroup) {\n            adviceNodes.push(<StatsImagesGroup key={advice.Title} imagesArray={advice.Img} score={advice.Score/advice.Img.length} />)\n        }\n\n        return <div className=\"title-scores\">\n            <p className=\"score-title-turn\">advice: {adviceGroup[0].Turn}</p>\n            {adviceNodes}\n        </div>\n    }\n}\n\nclass GameScore extends React.Component {\n    componentDidUpdate() {\n        var selected = this.props.game.Field.filter(f => {\n            return f.selected\n        });\n        var titleName = \"\";\n        if (selected.length > 0) {\n            var selectedChar = selected[0];\n            for (var title of this.props.game.Score.CompletedTitles) {\n                for (var char of title.Characters) {\n                    if (char.Img == selectedChar.Img) {\n                        titleName = title.Title\n                    }\n                }\n            }\n        }\n        if (titleName) {\n            const titleEl = $('a:contains(' + titleName + ')');\n            const scoreEl = $('#score');\n            if (titleEl.length) {\n                scoreEl[0].scrollTop = scoreEl[0].scrollTop + titleEl.position()['top'] - 15;\n                scoreEl.perfectScrollbar('update');\n            }\n        }\n    }\n\n    componentDidMount() {\n        $('#score').perfectScrollbar();\n    }\n\n    getTotalScore() {\n        if (this.props.game.Score.TotalScore != -1000) {\n            return this.props.game.Score.TotalScore;\n        }\n        const {completedTitles, game} = this.props;\n        var totalScore = 0;\n        completedTitles.forEach((title) => {\n            title.Characters.forEach((char) => {\n                totalScore += char.Score;\n            })\n        });\n        for (var change of game.Score.ChangeImgs) {\n            totalScore += change.Score\n        }\n        for (var advice of game.Score.Advices) {\n            totalScore += advice.Score\n        }\n\n        return totalScore;\n    }\n\n    groupByTurn(values) {\n        var result = {};\n        for(var val of values) {\n            if (!(val.Turn in result)) {\n                result[val.Turn] = []\n            }\n            result[val.Turn].push(val)\n        }\n        return result;\n    }\n\n    render() {\n        const {completedTitles, currentTurn, game} = this.props;\n        var titlesNodes = completedTitles.map((title, i) => {\n            return [parseInt(title.Turn, 10), <CompleteTitle key={'complete' + title.Id + i} title={title} />]\n        });\n\n        var changedImagesGroups = this.groupByTurn(game.Score.ChangeImgs);\n        for(const turn in changedImagesGroups) {\n            titlesNodes.push([parseInt(turn, 10), <ChangeImage key={'changeImage' + turn} changeGroup={changedImagesGroups[turn]} />])\n        }\n\n        var advicesGroups = this.groupByTurn(game.Score.Advices);\n        for(const turn in advicesGroups) {\n            titlesNodes.push([parseInt(turn, 10), <Advice key={'advice' + turn} adviceGroup={advicesGroups[turn]} />])\n        }\n\n        titlesNodes.sort((a,b) => a[0] >= b[0] ? 1: -1);\n\n        //last titles in the end of the list\n        titlesNodes.reverse();\n        var startDate = new Date().toLocaleString();\n        if (game.Date) {\n            startDate = new Date(game.Date).toLocaleString()\n        }\n        var gameTime = null;\n        if (game.Score.TotalScore != -1000 && game.Date != game.EndDate) {\n            gameTime = Math.round((new Date(game.EndDate) - new Date(game.Date))/1000/60)\n        }\n        return <div id=\"score\" className=\"window\">\n            <p>Turn: {currentTurn}</p>\n            <p>Total score: {this.getTotalScore()}</p>\n            <div className=\"difficulty-stat\">\n                <p>Start date: {startDate}</p>\n                {gameTime ? <p>Game time: {gameTime} min</p>:\"\"}\n                {game.UserName != \"\" ? <p>MAL User: {game.UserName}</p>: \"\"}\n                <p>Difficulty: {game.Difficulty+1}</p>\n            </div>\n            {titlesNodes.map(item => item[1])}\n\n        </div>\n    }\n}"]}